//package a3;

//package a3;

import java.io.*;
import java.net.*;
import java.nio.file.*;
import java.util.*;
import java.lang.*;
import java.util.concurrent.TimeUnit;

public class client {
	public static void main(String args[]) throws Exception {
		String host;
		int port;
		String command;
		String filename;
		int recvSize;
		int waitTime;
		int sendSize;

		if (args.length != 3 && args.length != 6 && args.length != 5) {
			System.out.println("incorrect number of arguments");
			System.exit(1);
		} else {
			host = args[0];
			port = Integer.parseInt(args[1]);
			command = args[2];

			// terminate server: client <host> <port> F
			if (args.length == 3 && command.substring(0, 1).equals("F")) {
				System.out.println("terminate");
				// create tcp socket
				Socket sock = new Socket(host, port);
				// pad and send command
				for (int i = command.length(); i < 9; i++) {
					command += '\0';
				}
				DataOutputStream outToServer = new DataOutputStream(sock.getOutputStream());
				outToServer.writeBytes(command);
				outToServer.close();
				sock.close();
			}
			// downlaod: client <host> <port> G<key> <file name> <recv size>
			else if (args.length == 5 && command.substring(0, 1).equals("G")) {
				filename = args[3];
				recvSize = Integer.parseInt(args[4]);
				// create tcp socket
				try {
				Socket sock = new Socket(host, port);
				} catch (Exception e) {
					System.out.println("Downloader connection refused);
				}
				// pad and send command
				for (int i = command.length(); i < 9; i++) {
					command += '\0';
				}
				DataOutputStream outToServer = new DataOutputStream(sock.getOutputStream());
				InputStream stream = sock.getInputStream();
				BufferedReader inFromServer = new BufferedReader(new InputStreamReader(stream));
				
				outToServer.writeBytes(command);
//				System.out.println("send G to server");
//				System.out.println("download client send "+command.length()+" byte data");
				
				// write to file called <filename>
				byte[] buffer = new byte[recvSize];
				FileOutputStream fos = new FileOutputStream(filename);
//				BufferedWriter buff = new BufferedWriter(new FileWriter(filename));
				int c;
				while ((c = stream.read(buffer, 0, recvSize)) != -1) {
					fos.write(buffer);
//					System.out.println("read from server "+(char) c);
				}
				fos.close();
				outToServer.close();
//				System.out.println("close stream");
				inFromServer.close();
//				System.out.println("close stream");
				sock.close();
//				System.out.println("close download sock");
			}
			// upload: client <host> <port> P<key> <file name> <send size> <wait time>
			else if (args.length == 6 && command.substring(0, 1).equals("P")) {
				filename = args[3];
				sendSize = Integer.parseInt(args[4]);
				waitTime = Integer.parseInt(args[5]);
				// create tcp socket
				Socket sock = new Socket(host, port);
				// pad and send command
				for (int i = command.length(); i < 9; i++) {
					command += '\0';
				}
				DataOutputStream outToServer = new DataOutputStream(sock.getOutputStream());
				BufferedReader inFromServer = new BufferedReader(new InputStreamReader(sock.getInputStream()));
				outToServer.writeBytes(command);
				// read from file called <filename>
				String content, temp;
				byte[] slice = null;
				try {
					Path path = Paths.get(filename);
					System.out.println(filename);
					byte[] file = Files.readAllBytes(path);
					int num = (int) Math.ceil((double) file.length / sendSize);
					int index = 0;
					while (index < num) {
						if (index != (num - 1)) {
							slice = Arrays.copyOfRange(file, index * sendSize, (index + 1) * sendSize);
						}
						// otherwise, put the rest data into payload
						else {
							slice = Arrays.copyOfRange(file, index * sendSize, file.length);
						}
						outToServer.write(slice);
//						System.out.println("upload a chunk");
						index++;
						Thread.sleep(waitTime);
					}
					outToServer.close();
//					System.out.println("close upload stream");
					sock.close();
//					System.out.println("close uploder");
				} catch (FileNotFoundException e) {
					e.printStackTrace();
				}
			} else {
				System.out.println("Incorrect argument");
				System.exit(1);
			}
			
		}
	}
}
