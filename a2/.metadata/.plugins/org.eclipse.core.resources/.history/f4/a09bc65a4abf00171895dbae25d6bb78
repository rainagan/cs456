import java.io.*;
import java.net.*;

public class Receiver {

	private static int protocol;
	private static String filename;
	private static int rport, port;
	private static DatagramSocket socket1;
	private static PrintStream file;

	private static DatagramSocket socket1;
	private static int port;
	private static InetAddress ip;
	private static String str;
	private static BufferedWriter buff;
	private static String log;
	private static int expectSeqNum;

	public static void main(String[] args) throws Exception {
		if (args.length != 2) {
			System.out.println("Incorrect input. Correct input is <protocol selector> <filename>");
			System.exit(-1);
		}
		// 0 for go-back-n, 1 for selective repeat
		int protocolSelector = Integer.parseInt(args[0]);
		// filename to which the transferred file is written
		String filename = args[1];

		// allocate a free port number and create UDP with that port number
		ServerSocket UDPsock = new ServerSocket(0);
		port = UDPsock.getLocalPort();
		DatagramSocket socket = new DatagramSocket(port);
		System.out.println("port number: " + port);

		// /* create file */
		// file = new PrintStream(new FileOutputStream(filename));
		//
		// /* create socket */
		// socket1 = new DatagramSocket();
		// rport = socket1.getLocalPort();
		//
		// /* write recvInfo */
		// FileWriter file = new FileWriter("recvInfo");
		// file.write(InetAddress.getLocalHost().getHostAddress() + " ");
		// file.write(rport + "\n");
		// file.close();
		//
		// if (protocol == 0) {
		// goBackN();
		// } else if (protocol == 1) {
		// selectiveRepeat();
		// }
		// write ip and port to a recvInfo
		str = "recvInfo ";
		buff = new BufferedWriter(new FileWriter("recvInfo", true));
		// buff.write(str);
		buff.write(InetAddress.getLocalHost().getHostName());
		buff.append(" ");
		str = Integer.toString(port);
		buff.append(str);
		buff.append("\n");
		buff.close();
		System.out.println("created file");

		// create a file called filename
		buff = new BufferedWriter(new FileWriter(filename, true));

		if (protocolSelector == 0) {
			goBackN();
		} else if (protocolSelector == 1) {
			selectiveRepeat();
		} else {
			System.out.println("incorrect protocol selector. Should be 0 or 1");
			System.exit(-1);
			;
		}
	}

//	private static void selectiveRepeat() throws Exception {
//		int LHSWindow = 0;
//		int RHSWindow = 9;
//		int lastPakSeqNum = -1;
//		int lastACKSeqNum = -1;
//		while (true) {
//			byte[] receive = new byte[1024];
//			DatagramPacket receivePacket = new DatagramPacket(receive, receive.length);
//			socket1.receive(receivePacket);
//			InetAddress ip = receivePacket.getAddress();
//			port = receivePacket.getPort();
//
//			/* get info from received packet */
//			Packet data = Packet.toPacket(receivePacket.getData());
//			int packetSeqNum = data.getSeqNum();
//			int packetType = data.getType();
//			print(false, packetType, data.getLength(), packetSeqNum);
//
//			/* check if it's EOT */
//			if (packetType == 2) {
//				Packet EOT = Packet.createEOT(data.getSeqNum());
//				byte[] eotByte = EOT.toBytes();
//				DatagramPacket eotpacket = new DatagramPacket(eotByte, eotByte.length, ip, port);
//				socket1.send(eotpacket);
//				print(true, 2, EOT.getLength(), EOT.getSeqNum());
//				socket1.close();
//				break;
//			}
//
//			/* check range */
//			if (packetSeqNum > RHSWindow) {
//				LHSWindow += 10;
//				RHSWindow += 10;
//			}
//			file.println(new String(data.getPayload()));
//			Packet ACK = Packet.createACK(packetSeqNum);
//			byte[] ackByte = ACK.toBytes();
//			DatagramPacket ackPacket = new DatagramPacket(ackByte, ackByte.length, ip, port);
//			socket1.send(ackPacket);
//			print(true, ACK.getType(), ACK.getLength(), ACK.getSeqNum());
//		}
//
//	}

	private static void goBackN() throws Exception {
		byte[] receiveData;
		byte[] sendData;
		int lastPakSeqNum = -1;
		int lastACKSeqNum = -1;
		DatagramPacket receivePacket;
		
		while (true) {
			receiveData = new byte[1024];
			receivePacket = new DatagramPacket(receiveData, receiveData.length);
			socket1.receive(receivePacket);
			InetAddress ip = receivePacket.getAddress();
			port = receivePacket.getPort();

			/* get info from received packet */
			Packet p = Packet.byteToPacket(receivePacket.getData());
			int seqNum = (int) p.getSeqNum();
			int type = (int) p.getType();
			log = "PKT RECV "; 
			if (type == 0) {
				log += "DAT ";
			} else if (type == 1) {
				log += "ACK";
			} else if (type == 2) {
				log += "EOT";
			} else {
				throw new Exception("incorrect protocol type");
			}
			System.out.println("PKT RECV");
			print(false, type, p.getLength(), seqNum);

			/* check if it's EOT */
			if (packetType == 2) {
				Packet EOT = Packet.createEOT(data.getSeqNum());
				byte[] eotByte = EOT.toBytes();
				DatagramPacket eotpacket = new DatagramPacket(eotByte, eotByte.length, ip, port);
				socket1.send(eotpacket);
				print(true, 2, EOT.getLength(), EOT.getSeqNum());
				socket1.close();
				break;
			}

			/* check ordering */
			if (packetSeqNum == lastPakSeqNum + 1) {
				lastPakSeqNum++;
				lastACKSeqNum++;

				file.println(new String(data.getPayload()));
			}
			Packet ACK = Packet.createACK(lastACKSeqNum);
			byte[] ackByte = ACK.toBytes();
			DatagramPacket ackPacket = new DatagramPacket(ackByte, ackByte.length, ip, port);
			socket1.send(ackPacket);
			print(true, ACK.getType(), ACK.getLength(), ACK.getSeqNum());
		}

	}

	/* PKT {SEND|RECV} {DAT|ACK|EOT} <total length> <sequence number> */
	private static void print(Boolean ifSend, int type, int length, int seq) throws Exception {
		System.out.print("PKT ");
		if (ifSend) {
			System.out.print("SEND ");
		} else if (!ifSend) {
			System.out.print("RECV ");
		}
		if (type == 0) {
			System.out.print("DAT " + length + " " + seq + "\n");
		} else if (type == 1) {
			System.out.print("ACK " + length + " " + seq + "\n");
		} else if (type == 2) {
			System.out.print("EOT " + length + " " + seq + "\n");
		}
	}
}
