//package a3;

//package a3;

import java.io.*;
import java.net.*;
import java.util.*;
import java.util.concurrent.locks.*;
import java.lang.*;

import org.omg.CosNaming.NamingContextPackage.NotEmpty;

public class server {
	private static boolean terminate;
	private static String host;
	private static Map<String, Socket> request = new HashMap<String, Socket>();
	private static ServerSocket socket;
	private static ArrayList<fileExchangeThread> threadList = new ArrayList<fileExchangeThread>();
	private static Lock lock = new ReentrantLock();

	public static void main(String[] args) throws Exception {
		terminate = false;

		// The server is started without any parameters and
		// creates a TCP socket at an OS-assigned port.
		socket = new ServerSocket(0);
		int port = socket.getLocalPort();
		// print out the assigned port number
		System.out.println(port);
		// store port number in a local file 'port'
		BufferedWriter buff = new BufferedWriter(new FileWriter("port"));
		buff.write(Integer.toString(port) + '\n');
		buff.flush();
		buff.close();

		// handle request
		while (!terminate) {
			// System.out.println("while");
			// try {
			// connection socket
			Socket s = socket.accept();
			System.out.println("new conenction to server");

			// read command from client
			InputStream stream = s.getInputStream();
			BufferedReader inFromClient = new BufferedReader(new InputStreamReader(stream));
			int c;
			StringBuilder temp = new StringBuilder();
			for (int i = 0; i < 9; i++) {
				c = inFromClient.read();
				temp.append((char) c);
			}
			String command1 = temp.toString();
			// System.out.println(content + " " + content.length());

			// read the char command
			String command = command1.substring(0, 1);
			// System.out.println(command);

			// read the key
			String key = command1.substring(1, 8);
			// System.out.println(key);

			// download
			if (command.equals("G") && !terminate) {
				// download tcp exist in dictionary
				lock.lock();
				if (request.get(key) != null) {
					throw new Exception("duplicate download key");
				}
				// download tcp not in dictionary
				else {
					// add this key value pair to request dictionary
					request.put(key, s);
				}
				lock.unlock();
			}
			// upload
			else if (command.equals("P") && !terminate) {
				// System.out.print("upload");
				// byte[] ba = new byte[1024];
				ArrayList<Byte> bytearr = new ArrayList<Byte>();
				while ((c = stream.read()) != -1) {
					bytearr.add((byte) c);
				}
				byte[] content = new byte[bytearr.size()];
				for (int i = 0; i < bytearr.size(); i++) {
					content[i] = bytearr.get(i);
				}
				// bytearr.toArray();

				// found a match
				lock.lock();
				if (request.get(key) != null) {
					// forward data, and remove key after forwarding
					Socket download = request.remove(key);
					lock.unlock();

					fileExchangeThread thread = new fileExchangeThread(s, download, stream, content);
					threadList.add(thread);
					thread.start();

					// server forward to downloader
					// DataOutputStream outToClient = new
					// DataOutputStream(download.getOutputStream());
					// outToClient.writeBytes(content);
					//
					// inFromClient.close();
					// outTo.close();
				}
				// no match
				else {
					lock.unlock();
					throw new Exception("uploader starts before downloader");
				}
			} else if (command.equals("F")) {
				System.out.println("terminate");
				terminate = true;
				// wait for all fileExcahngeThread to finish
				for (fileExchangeThread thread : threadList) {
					thread.join();
				}
				// close all unpaired connection
				for (Socket uc : request.values()) {
					uc.close();
				}
				break;
			} else {
				throw new Exception("Incorrect command");
			}
			// System.out.println("end of while");
			// } catch (Exception e) {
			// System.out.print("Connection error");
			// }
		}
		System.out.println("server close correctly");
		socket.close();
	}
}